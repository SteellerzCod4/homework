Данный код представляет собой класс Parser, который производит парсинг страницы "https://author.today/top/writers" и извлекает данные об авторах и
класс Visualizer, который предназначен для визуализации данных, полученных с помощью класса Parser. 
Класс принимает экземпляр класса Parser в качестве аргумента при инициализации. 

Класс Parser содержит следующие атрибуты:

- `URL`: содержит адрес страницы для парсинга.
- `ENCODING`: кодировка используемая для обработки текста.
- `AUTHOR_DIVIDER`: разделитель между карточками авторов на странице.
- `file_name`: имя файла, в который будут сохранены данные.

Класс Parser имеет следующие методы:

- `_get_page(self, i)`: получает HTML-страницу по указанному номеру страницы.
- `_get_author_cards(self, page_num)`: извлекает карточки авторов со страницы.
- `_parse_element(self, text, start_index, start_text, end_text)`: парсит элемент из текста страницы.
- `get_parsed_authors(self)`: возвращает сохраненные данные из файла в формате JSON.
- `parse_authors(self, start_page=1, last_page=1)`: парсит данные со страницы и сохраняет их в формате JSON.
- `save_to_file(self)`: сохраняет данные в файл в формате JSON.

Метод `parse_authors()` принимает два аргумента: `start_page` и `last_page`, которые определяют первую и последнюю страницы для парсинга соответственно. В процессе парсинга, метод извлекает информацию о каждом авторе, такую как: изображение, имя, рейтинг, количество подписчиков и количество книг. 
После парсинга, данные сохраняются в файл `authors_data.json`. 

Метод `save_to_file()` сохраняет данные, собранные во время парсинга, в файл `authors_data.json`. 

Метод `get_parsed_authors()` возвращает данные, сохраненные в файле `authors_data.json`, в формате JSON.

Класс `Visualizer` имеет следующие методы:

- `draw_stat(self, key, label, start_index=0, last_index=10000)`: визуализирует статистические данные, которые были получены в результате парсинга. Метод принимает следующие аргументы:
  - `key`: ключ, по которому будут извлекаться данные.
  - `label`: название для графика.
  - `start_index`: индекс первого автора для визуализации.
  - `last_index`: индекс последнего автора для визуализации.
  Метод извлекает данные из файла `authors_data.json` и отображает их на графике с помощью библиотеки `matplotlib`.

- `draw_authors_image(self, authors_index)`: выводит изображение автора по его индексу. Метод принимает следующий аргумент:
  - `authors_index`: индекс автора, чье изображение необходимо вывести.
  Метод извлекает данные из файла `authors_data.json` и выводит изображение автора на экран с помощью библиотеки `Pillow`.

- `draw_authors_rating(self, start_index=0, last_index=10000)`: визуализирует рейтинг авторов, используя метод `draw_stat()`. Метод принимает следующие аргументы:
  - `start_index`: индекс первого автора для визуализации.
  - `last_index`: индекс последнего автора для визуализации.

- `draw_amount_of_subs(self, start_index=0, last_index=10000)`: визуализирует количество подписчиков авторов, используя метод `draw_stat()`. Метод принимает следующие аргументы:
  - `start_index`: индекс первого автора для визуализации.
  - `last_index`: индекс последнего автора для визуализации.

- `draw_amount_of_books(self, start_index=0, last_index=10000)`: визуализирует количество книг авторов, используя метод `draw_stat()`. Метод принимает следующие аргументы:
  - `start_index`: индекс первого автора для визуализации.
  - `last_index`: индекс последнего автора для визуализации.

Данный класс помогает визуализировать данные, полученные с помощью класса `Parser`, и позволяет получить представление о распределении статистических данных среди авторов.

